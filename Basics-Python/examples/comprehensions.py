# Общие приложения — это создание новых списков, в которых каждый элемент является результатом некоторых операций,
# применяемых к каждому члену другой последовательности или итерации, или создание подпоследовательности тех элементов,
# которые удовлетворяют определенному условию.

# Важно: ЭТО НЕ ГЕНЕРАТОРЫ списков!

# Напишем генератор кубов чисел до 5 включительно:

nums_cube_gen = (num ** 3 for num in range(5 + 1))
print(type(nums_cube_gen), *nums_cube_gen)

# А если нам в алгоритме нужен список? Можем выполнить преобразование:
nums_cube_gen = (num ** 3 for num in range(5 + 1))
nums_cube = list(nums_cube_gen)
print(type(nums_cube), *nums_cube)

# Или ( меняем на [
nums_cube_gen = [num ** 3 for num in range(5 + 1)]
print(type(nums_cube_gen), *nums_cube_gen)

# В данном примере мы получаем обычный список альтернативным циклу-итератору способом. Давайте перепишем этот код по-старому:

nums_cube = []
for num in range(5 + 1):
    nums_cube.append(num ** 3)
    